#!/usr/bin/env ruby

require 'aws-sdk-ebs'
require 'aws-sdk-ec2'
require 'json'

def ebs_volumes
  $ec2_client.describe_volumes.volumes
end

def snapshots_for_volume(volume_id)
  snapshots = $ec2_client.describe_snapshots(filters: [{ name: 'volume-id', values: [volume_id] }]).snapshots
  snapshots.sort_by(&:start_time).reverse
end

def latest_block_zero(snapshots)
  snapshots.each do |snapshot|
    snapshot_id = snapshot.snapshot_id
    blocks = $ebs_client.list_snapshot_blocks(snapshot_id: snapshot_id).blocks

    found = blocks.detect { |block| block.block_index.zero? }
    return { snapshot_id: snapshot_id, block: found } if found
  end
end

def get_block(snapshot_id, block_token, block_index = 0)
  {
    snapshot_id: snapshot_id,
    block: $ebs_client.get_snapshot_block(snapshot_id: snapshot_id, block_index: block_index, block_token: block_token)
  }
end

def mbr?(block_zero)
  block_zero.block_data.rewind
  return false if block_zero.block_data.getbyte != 0xEB
  return false if block_zero.block_data.getbyte != 0x63
  return false if block_zero.block_data.getbyte != 0x90

  true
end

def bootable?(block_zero)
  block_zero.block_data.rewind
  block_zero.block_data.pos = 0x1BE

  block_zero.block_data.getbyte == 0x80
end

###############

$ec2_client = Aws::EC2::Client.new
$ebs_client = Aws::EBS::Client.new

data = {}

ebs_volumes.each do |volume|
  volume_id = volume.volume_id
  snapshots = snapshots_for_volume(volume_id)
  if snapshots.empty?
    data[volume_id] = { type: 'unknown' }
    next
  end

  latest     = latest_block_zero(snapshots)
  block_zero = get_block(latest[:snapshot_id], latest[:block].block_token)

  root = mbr?(block_zero[:block]) && bootable?(block_zero[:block])
  data[volume_id] = { type: root ? 'root' : 'data' }
end;

print data.to_json
